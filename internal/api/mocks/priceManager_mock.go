// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockpriceManager creates a new instance of MockpriceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpriceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockpriceManager {
	mock := &MockpriceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockpriceManager is an autogenerated mock type for the priceManager type
type MockpriceManager struct {
	mock.Mock
}

type MockpriceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockpriceManager) EXPECT() *MockpriceManager_Expecter {
	return &MockpriceManager_Expecter{mock: &_m.Mock}
}

// ProductAveragePrice provides a mock function for the type MockpriceManager
func (_mock *MockpriceManager) ProductAveragePrice(categoryName string) (float64, error) {
	ret := _mock.Called(categoryName)

	if len(ret) == 0 {
		panic("no return value specified for ProductAveragePrice")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return returnFunc(categoryName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) float64); ok {
		r0 = returnFunc(categoryName)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(categoryName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockpriceManager_ProductAveragePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProductAveragePrice'
type MockpriceManager_ProductAveragePrice_Call struct {
	*mock.Call
}

// ProductAveragePrice is a helper method to define mock.On call
//   - categoryName string
func (_e *MockpriceManager_Expecter) ProductAveragePrice(categoryName interface{}) *MockpriceManager_ProductAveragePrice_Call {
	return &MockpriceManager_ProductAveragePrice_Call{Call: _e.mock.On("ProductAveragePrice", categoryName)}
}

func (_c *MockpriceManager_ProductAveragePrice_Call) Run(run func(categoryName string)) *MockpriceManager_ProductAveragePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockpriceManager_ProductAveragePrice_Call) Return(f float64, err error) *MockpriceManager_ProductAveragePrice_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockpriceManager_ProductAveragePrice_Call) RunAndReturn(run func(categoryName string) (float64, error)) *MockpriceManager_ProductAveragePrice_Call {
	_c.Call.Return(run)
	return _c
}
