// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/mucunga90/ecommerce/internal"
	mock "github.com/stretchr/testify/mock"
)

// NewMockorderManager creates a new instance of MockorderManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockorderManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockorderManager {
	mock := &MockorderManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockorderManager is an autogenerated mock type for the orderManager type
type MockorderManager struct {
	mock.Mock
}

type MockorderManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockorderManager) EXPECT() *MockorderManager_Expecter {
	return &MockorderManager_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function for the type MockorderManager
func (_mock *MockorderManager) CreateOrder(o *internal.Order) error {
	ret := _mock.Called(o)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*internal.Order) error); ok {
		r0 = returnFunc(o)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockorderManager_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockorderManager_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - o *internal.Order
func (_e *MockorderManager_Expecter) CreateOrder(o interface{}) *MockorderManager_CreateOrder_Call {
	return &MockorderManager_CreateOrder_Call{Call: _e.mock.On("CreateOrder", o)}
}

func (_c *MockorderManager_CreateOrder_Call) Run(run func(o *internal.Order)) *MockorderManager_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *internal.Order
		if args[0] != nil {
			arg0 = args[0].(*internal.Order)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockorderManager_CreateOrder_Call) Return(err error) *MockorderManager_CreateOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockorderManager_CreateOrder_Call) RunAndReturn(run func(o *internal.Order) error) *MockorderManager_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}
